name: Deploy to Kubernetes

on:
  workflow_run:
    workflows: ["Terraform Apply"]
    types:
      - completed
  workflow_dispatch: # Manual trigger
    inputs:
      action:
        description: 'Choose action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy') || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Get Terraform Outputs
        id: terraform
        run: |
          cd terraform/gke
          terraform init -backend-config="bucket=${{ secrets.GCP_PROJECT_ID }}-terraform-state" -backend-config="prefix=gke/state"
          PROJECT_ID=$(terraform output -raw project_id)
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          REGION=$(terraform output -raw region)
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT

      - name: Configure kubectl
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          gcloud container clusters get-credentials ${{ steps.terraform.outputs.cluster_name }} \
            --region ${{ steps.terraform.outputs.region }} \
            --project ${{ steps.terraform.outputs.project_id }}

      - name: Create Rails Master Key Secret
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          kubectl create secret generic rails-master-key \
            --from-file=master.key=config/master.key \
            --dry-run=client -o yaml --validate=false | kubectl apply -f - --validate=false

      - name: Deploy Database
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          kubectl apply -f k8s/db-pvc.yml --validate=false
          kubectl apply -f k8s/db-svc.yml --validate=false
          kubectl apply -f k8s/db-deploy.yml --validate=false
          kubectl wait --for=condition=ready pod -l app=student-app-db --timeout=300s

      - name: Deploy Application
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          kubectl apply -f k8s/app-svc.yml --validate=false
          kubectl apply -f k8s/app-deployment.yml --validate=false
          kubectl apply -f k8s/ingress.yml --validate=false

      - name: Install ArgoCD
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          echo "Installing ArgoCD..."
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Granting cluster-admin permissions..."
          kubectl create clusterrolebinding argocd-admin \
            --clusterrole=cluster-admin \
            --serviceaccount=default:default \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          
          echo "Waiting for ArgoCD to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          
          echo "Exposing ArgoCD via LoadBalancer..."
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
          
          echo "Waiting for external IP..."
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' service/argocd-server -n argocd --timeout=300s || true

      - name: Verify Deployment
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          echo "Checking deployment status..."
          kubectl get pods
          echo "\nService endpoints:"
          kubectl get svc
          echo "\nIngress status and IP:"
          kubectl get ingress
          echo "\nWaiting for external IP (may take a few minutes)..."
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' ingress/rails-ingress --timeout=300s
          echo "\nApplication is accessible at:"
          echo "http://$(kubectl get ingress rails-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')/"
          
          echo "\n================================="
          echo "ArgoCD Connection Details"
          echo "================================="
          ARGOCD_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending...")
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d || echo "Not ready yet")
          
          echo "ArgoCD URL: https://$ARGOCD_IP"
          echo "Username: admin"
          echo "Password: $ARGOCD_PASSWORD"
          echo "================================="
          echo "Note: ArgoCD may take a few minutes to get external IP"

  destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Get Terraform Outputs
        id: terraform
        run: |
          cd terraform/gke
          terraform init -backend-config="bucket=${{ secrets.GCP_PROJECT_ID }}-terraform-state" -backend-config="prefix=gke/state"
          PROJECT_ID=$(terraform output -raw project_id)
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          REGION=$(terraform output -raw region)
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT

      - name: Configure kubectl
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          gcloud container clusters get-credentials ${{ steps.terraform.outputs.cluster_name }} \
            --region ${{ steps.terraform.outputs.region }} \
            --project ${{ steps.terraform.outputs.project_id }}

      - name: Destroy Kubernetes Resources
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          echo "Destroying all Kubernetes resources..."
          kubectl delete -f k8s/ingress.yml --ignore-not-found=true
          kubectl delete -f k8s/app-deployment.yml --ignore-not-found=true
          kubectl delete -f k8s/app-svc.yml --ignore-not-found=true
          kubectl delete -f k8s/db-deploy.yml --ignore-not-found=true
          kubectl delete -f k8s/db-svc.yml --ignore-not-found=true
          kubectl delete -f k8s/db-pvc.yml --ignore-not-found=true
          kubectl delete secret rails-master-key --ignore-not-found=true
          
          echo "Destroying ArgoCD..."
          kubectl delete namespace argocd --ignore-not-found=true
          
          echo "All resources destroyed successfully!"